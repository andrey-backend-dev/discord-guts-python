import os
import io
import asyncio
import logging
from datetime import datetime
import discord
from discord.commands import Option
from faster_whisper import WhisperModel
from langchain_gigachat import GigaChat
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

DISCORD_TOKEN = os.environ["DISCORD_TOKEN"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ASR
WHISPER_MODEL = os.getenv("WHISPER_MODEL", "small")
WHISPER_DEVICE = os.getenv("WHISPER_DEVICE", "cpu")
WHISPER_COMPUTE = os.getenv("WHISPER_COMPUTE", "int8")

# GigaChat (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
GIGACHAT_CREDENTIALS = os.getenv("GIGACHAT_CREDENTIALS")
GIGACHAT_SCOPE = os.getenv("GIGACHAT_SCOPE")
GIGACHAT_CERT_PATH = os.getenv("GIGACHAT_CERT_PATH")

# –ò–Ω—Ç–µ–Ω—Ç—ã
intents = discord.Intents.default()
intents.guilds = True
intents.voice_states = True
intents.members = True

bot = discord.Bot(intents=intents)

# –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ –≥–∏–ª—å–¥–∏–∏
sessions: dict[int, dict] = {}

# –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Whisper
whisper_model = None

def get_whisper_model():
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Whisper"""
    global whisper_model
    if whisper_model is None:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é Whisper –º–æ–¥–µ–ª—å...")
        whisper_model = WhisperModel(WHISPER_MODEL, device=WHISPER_DEVICE, compute_type=WHISPER_COMPUTE)
        logger.info("Whisper –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞!")
    return whisper_model

async def _stop_after(guild_id: int, seconds: int):
    await asyncio.sleep(seconds)
    data = sessions.get(guild_id)
    if data and data["vc"].is_connected():
        try:
            data["vc"].stop_recording()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")

def _asr_one(path: str) -> str:
    model = get_whisper_model()
    try:
        segments, info = model.transcribe(path, vad_filter=True, language="ru")
        text = " ".join(seg.text for seg in segments)
        return text.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ ASR: {e}")
        return f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}"

def _summarize_with_gigachat(transcript: str) -> str:
    if not GIGACHAT_CREDENTIALS:
        return "GigaChat –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"
    
    prompt = f"""
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫. –î–∞–Ω —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–∑ Discord.
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π: –∫—Ç–æ –ø—Ä–∞–≤ –∏ –ø–æ—á–µ–º—É? –ö—Ç–æ –∫–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç?

–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:
{transcript}
"""
    
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        giga = GigaChat(
            credentials=GIGACHAT_CREDENTIALS, 
            scope=GIGACHAT_SCOPE,
            ca_bundle_file=GIGACHAT_CERT_PATH,
            model='GigaChat-Pro'
        )
        resp = giga.invoke(prompt)
        return resp.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ GigaChat: {e}")
        return f"–û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}"

async def _on_recording_finished(sink: discord.sinks.Sink, channel: discord.TextChannel):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô callback - —Ç–æ–ª—å–∫–æ sink –∏ channel"""
    guild_id = channel.guild.id
    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}")
    
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
    data = sessions.get(guild_id)
    if data:
        try:
            await data["vc"].disconnect(force=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")
        
        if (task := data.get("timer")) and not task.done():
            task.cancel()
        
        sessions.pop(guild_id, None)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
    parts = []
    files_to_send = []
    
    for user_id, audio in sink.audio_data.items():
        member = channel.guild.get_member(user_id)
        speaker = member.display_name if member else f"User_{user_id}"
        filename = f"{speaker}_{guild_id}.wav"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
        try:
            audio_data = audio.file
            audio_data.seek(0)
            with open(filename, "wb") as f:
                f.write(audio_data.read())
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            text = _asr_one(filename)
            if text and text.strip():
                parts.append(f"## {speaker}\n{text}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            files_to_send.append(discord.File(filename, filename=f"{speaker}.wav"))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –¥–ª—è {speaker}: {e}")
            parts.append(f"## {speaker}\n_–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}_")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(filename)
            except:
                pass
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    transcript_text = "\n\n".join(parts) if parts else "_–¢–∏—à–∏–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è_"
    summary = _summarize_with_gigachat(transcript_text)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M UTC")
    
    try:
        if files_to_send:
            await channel.send(
                content=f"üìä –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({timestamp})",
                files=files_to_send[:10]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Discord
            )
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
        transcript_file = discord.File(
            io.BytesIO(transcript_text.encode("utf-8")), 
            filename="transcript.md"
        )
        await channel.send("üìù **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:**", file=transcript_file)
        
        # –ê–Ω–∞–ª–∏–∑
        summary_file = discord.File(
            io.BytesIO(summary.encode("utf-8")), 
            filename="analysis.md"
        )
        await channel.send("üß† **–ê–Ω–∞–ª–∏–∑:**", file=summary_file)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        await channel.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

@bot.slash_command(name="listen", description="–ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –∞–Ω–∞–ª–∏–∑–æ–º")
async def listen(
    ctx: discord.ApplicationContext,
    duration: Option(int, "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö", required=False, default=300, min_value=10, max_value=3600)
):
    # –ü–æ–∏—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    voice_state = ctx.author.voice
    target_vc = voice_state.channel if voice_state else None
    
    if not target_vc and isinstance(ctx.channel, discord.TextChannel) and ctx.channel.category:
        for ch in ctx.channel.category.channels:
            if isinstance(ch, discord.VoiceChannel):
                target_vc = ch
                break
    
    if not target_vc:
        return await ctx.respond(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª. –í–æ–π–¥–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º.", 
            ephemeral=True
        )
    
    if ctx.guild.id in sessions:
        return await ctx.respond(
            "‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥—ë—Ç –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π `/stop_listening`", 
            ephemeral=True
        )
    
    try:
        await ctx.respond(f"üéôÔ∏è –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ **{target_vc.name}** –∏ –Ω–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å –Ω–∞ {duration} —Å–µ–∫...")
        
        vc = await target_vc.connect()
        timer_task = asyncio.create_task(_stop_after(ctx.guild.id, duration))
        sessions[ctx.guild.id] = {"vc": vc, "timer": timer_task}
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≤—ã–∑–æ–≤ - —Ç–æ–ª—å–∫–æ sink –∏ callback
        vc.start_recording(
            discord.sinks.WaveSink(), 
            _on_recording_finished,
            ctx.channel
        )
        
        logger.info(f"–ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞ –≤ {target_vc.name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏: {e}")
        await ctx.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}", ephemeral=True)
        sessions.pop(ctx.guild.id, None)

@bot.slash_command(name="stop_listening", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å")
async def stop_listening(ctx: discord.ApplicationContext):
    data = sessions.get(ctx.guild.id)
    if not data:
        return await ctx.respond("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç", ephemeral=True)
    
    try:
        data["vc"].stop_recording()
        await ctx.respond("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–ø–∏—Å—å...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        await ctx.respond(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")

@bot.slash_command(name="ping", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
async def ping(ctx: discord.ApplicationContext):
    """–ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    whisper_status = "‚úÖ –ì–æ—Ç–æ–≤" if whisper_model else "‚ö†Ô∏è –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
    await ctx.respond(f"üèì –ü–æ–Ω–≥! Whisper: {whisper_status}")

@bot.event
async def on_ready():
    logger.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {bot.user} (ID: {bot.user.id})")
    logger.info(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {len(bot.guilds)} —Å–µ—Ä–≤–µ—Ä–∞–º")
    
    # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    commands = [cmd.name for cmd in bot.pending_application_commands]
    logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {commands}")
    
    # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    try:
        await bot.sync_commands()
        logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        for guild in bot.guilds:
            logger.info(f"  ‚îî‚îÄ –°–µ—Ä–≤–µ—Ä: {guild.name} (ID: {guild.id})")
            
        logger.info("‚è≥ –ö–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã")
        logger.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–±—Ä–∞—Ç—å '/' –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
        logger.info("üîÑ –ö–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

@bot.event
async def on_application_command_error(ctx: discord.ApplicationContext, error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥"""
    logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã {ctx.command}: {error}")
    
    if not ctx.response.is_done():
        await ctx.respond(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {error}", ephemeral=True)

if __name__ == "__main__":
    if not DISCORD_TOKEN:
        logger.error("‚ùå DISCORD_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        exit(1)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞...")
    
    try:
        bot.run(DISCORD_TOKEN)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")