import os
import io
import math
import asyncio
import logging
import tempfile
import shutil
from datetime import datetime

import discord
from discord.commands import Option
from faster_whisper import WhisperModel
from langchain_gigachat import GigaChat
from dotenv import load_dotenv

# -------------------------
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# -------------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

# -------------------------
# ENV / –ö–û–ù–°–¢–ê–ù–¢–´
# -------------------------
DISCORD_TOKEN = os.environ["DISCORD_TOKEN"]

# ASR (Whisper / faster-whisper)
WHISPER_MODEL = os.getenv("WHISPER_MODEL", "small")
WHISPER_DEVICE = os.getenv("WHISPER_DEVICE", "cpu")      # "cpu" | "cuda"
WHISPER_COMPUTE = os.getenv("WHISPER_COMPUTE", "int8")   # –Ω–∞–ø—Ä–∏–º–µ—Ä: "float16" –Ω–∞ GPU

# GigaChat
GIGACHAT_CREDENTIALS = os.getenv("GIGACHAT_CREDENTIALS")
GIGACHAT_SCOPE = os.getenv("GIGACHAT_SCOPE", "GIGACHAT_API_B2B")
GIGACHAT_CERT_PATH = os.getenv("GIGACHAT_CERT_PATH")
GIGACHAT_MODEL = os.getenv("GIGACHAT_MODEL", "GigaChat-2-Pro")

# Discord –≤–ª–æ–∂–µ–Ω–∏—è
MAX_DISCORD_FILE_BYTES = int(os.getenv("MAX_DISCORD_FILE_BYTES", 7_500_000))  # < 8MB, —Å –∑–∞–ø–∞—Å–æ–º

# –ö–æ–¥–µ–∫/–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ (–Ω—É–∂–µ–Ω ffmpeg –¥–ª—è ogg/mp3)
AUDIO_SINK = os.getenv("AUDIO_SINK", "ogg").lower()  # "ogg" | "mp3" | "wav"

# –ë—é–¥–∂–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ GigaChat-2-Max (128k window)
# –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –ø–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Å–∏—Å—Ç–µ–º–∫—É:
GIGACHAT_INPUT_TOKENS_BUDGET = int(os.getenv("GIGACHAT_INPUT_TOKENS_BUDGET", 110_000))
# –ì—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞: ~3.2 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ç–æ–∫–µ–Ω (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º –∏ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)
CHAR_PER_TOKEN = float(os.getenv("CHAR_PER_TOKEN", "3.2"))

# -------------------------
# Discord intents
# -------------------------
intents = discord.Intents.default()
intents.guilds = True
intents.voice_states = True
intents.members = True

bot = discord.Bot(intents=intents)

# –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ –≥–∏–ª—å–¥–∏–∏
sessions: dict[int, dict] = {}

# –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Whisper
whisper_model = None


def get_whisper_model():
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Whisper."""
    global whisper_model
    if whisper_model is None:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é Whisper –º–æ–¥–µ–ª—å.")
        whisper_model = WhisperModel(
            WHISPER_MODEL,
            device=WHISPER_DEVICE,
            compute_type=WHISPER_COMPUTE
        )
        logger.info("Whisper –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞!")
    return whisper_model


async def _stop_after(guild_id: int, seconds: int):
    await asyncio.sleep(seconds)
    data = sessions.get(guild_id)
    if data and data["vc"].is_connected():
        try:
            data["vc"].stop_recording()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")


def _asr_one(path: str) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–¥–ª—è asyncio.to_thread)."""
    model = get_whisper_model()
    try:
        segments, info = model.transcribe(path, vad_filter=True, language="ru")
        text = " ".join(seg.text for seg in segments)
        return text.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ ASR: {e}")
        return f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}"


def _limit_text_to_token_budget(s: str, budget_tokens: int, char_per_token: float) -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –∫–æ–Ω—Ü–∞ –ø–æ–¥ –∑–∞–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç (–≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞)."""
    if budget_tokens <= 0 or char_per_token <= 0:
        return s
    char_budget = int(budget_tokens * char_per_token)
    if len(s) <= char_budget:
        return s
    # –ë–µ—Ä—ë–º "—Ö–≤–æ—Å—Ç" (–∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª–µ–∑–Ω–µ–µ –¥–ª—è —Å–∞–º–º–∞—Ä–∏)
    return s[-char_budget:]


def _summarize_with_gigachat(transcript: str) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è (–¥–ª—è asyncio.to_thread)."""
    if not GIGACHAT_CREDENTIALS:
        return "GigaChat –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"

    prompt = f"""
<role>
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Å –æ–ø—ã—Ç–æ–º —Ñ–∞—Å–∏–ª–∏—Ç–∞—Ü–∏–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –¥–∏—Å–∫—É—Å—Å–∏–π, –≤ —Ä–æ–ª–∏ –æ–ø—ã—Ç–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.
</role>
<task>
–î–∞–Ω —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–∑ Discord.
1) –ö—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø–æ –∏–º–µ–Ω–∞–º/–Ω–∏–∫–∞–º).
2) –í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–∑–∏—Å—ã –∫–∞–∂–¥–æ–≥–æ.
3) –ò—Ç–æ–≥: –æ–¥–∏–Ω –≥—Ä–∞–º–æ—Ç–Ω—ã–π –≤—ã–≤–æ–¥ (–∫—Ç–æ –ø—Ä–∞–≤, –∫–∞–∫–æ–π —Å–æ–≤–µ—Ç/—Ä–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –¥–∞—Ç—å)
</task>
–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:
{transcript}
""".strip()

    try:
        giga = GigaChat(
            credentials=GIGACHAT_CREDENTIALS,
            scope=GIGACHAT_SCOPE,
            ca_bundle_file=GIGACHAT_CERT_PATH,
            model=GIGACHAT_MODEL,
        )
        resp = giga.invoke(prompt)
        return resp.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ GigaChat: {e}")
        return f"–û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}"


def make_sink():
    """–í—ã–±–∏—Ä–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (OGG/MP3), fallback –Ω–∞ WAV."""
    try:
        # py-cord sinks –¥–æ—Å—Ç—É–ø–Ω—ã –∫–∞–∫ discord.sinks.OGGSink / MP3Sink / WaveSink
        if AUDIO_SINK in ("ogg", "opus") and hasattr(discord.sinks, "OGGSink"):
            return discord.sinks.OGGSink()
        if AUDIO_SINK == "mp3" and hasattr(discord.sinks, "MP3Sink"):
            return discord.sinks.MP3Sink()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {AUDIO_SINK} sink, –æ—Ç–∫–∞—Ç—ã–≤–∞—é—Å—å –Ω–∞ WAV: {e}")
    return discord.sinks.WaveSink()


def sink_ext(sink) -> str:
    n = type(sink).__name__.lower()
    if "ogg" in n or "opus" in n:
        return ".ogg"
    if "mp3" in n:
        return ".mp3"
    if "m4a" in n or "aac" in n:
        return ".m4a"
    return ".wav"


async def _on_recording_finished(sink: discord.sinks.Sink, channel: discord.TextChannel):
    """Callback –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏."""
    guild_id = channel.guild.id
    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}")

    # 1) –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
    data = sessions.get(guild_id)
    if data:
        try:
            await data["vc"].disconnect(force=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")
        if (task := data.get("timer")) and not task.done():
            task.cancel()
        sessions.pop(guild_id, None)

    # 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
    parts: list[str] = []
    files_to_send: list[discord.File] = []

    tmp_dir = tempfile.mkdtemp(prefix=f"rec_{guild_id}_")
    ext = sink_ext(sink)

    try:
        for user_id, audio in sink.audio_data.items():
            member = channel.guild.get_member(user_id)
            speaker = member.display_name if member else f"User_{user_id}"
            tmp_path = os.path.join(tmp_dir, f"{speaker}_{guild_id}{ext}")

            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–π—Ç—ã sink'–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                audio.file.seek(0)
                with open(tmp_path, "wb") as f:
                    shutil.copyfileobj(audio.file, f)

                # ASR ‚Äî –≤—ã–Ω–æ—Å–∏–º –≤ –ø–æ—Ç–æ–∫, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
                text = await asyncio.to_thread(_asr_one, tmp_path)
                if text and text.strip():
                    parts.append(f"## {speaker}\n{text}")

                # –í–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–ª–µ–∑–∞–µ—Ç –≤ –ª–∏–º–∏—Ç Discord
                try:
                    size = os.path.getsize(tmp_path)
                    if size <= MAX_DISCORD_FILE_BYTES:
                        with open(tmp_path, "rb") as f:
                            buf = io.BytesIO(f.read())
                        buf.seek(0)
                        files_to_send.append(discord.File(buf, filename=f"{speaker}{ext}"))
                    else:
                        logger.warning(f"–§–∞–π–ª {tmp_path} {size/1_000_000:.2f}MB > –ª–∏–º–∏—Ç–∞, –Ω–µ –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞—é.")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å {tmp_path}: {e}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –¥–ª—è {speaker}: {e}")
                parts.append(f"## {speaker}\n_–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}_")

        transcript_text = "\n\n".join(parts) if parts else "_–¢–∏—à–∏–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è_"

        # 3) –†–µ–∂–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø–æ–¥ –±—é–¥–∂–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ GigaChat-2-Max (128k window)
        transcript_for_llm = _limit_text_to_token_budget(
            transcript_text,
            GIGACHAT_INPUT_TOKENS_BUDGET,
            CHAR_PER_TOKEN
        )

        # 4) –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è ‚Äî —Ç–∞–∫–∂–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        summary = await asyncio.to_thread(_summarize_with_gigachat, transcript_for_llm)

        # 5) –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        timestamp = datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")

        # –û—Ç–ø—Ä–∞–≤–∏–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await channel.send(content=f"üìä –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({timestamp})")

        # –í–ª–æ–∂–µ–Ω–∏—è –∞—É–¥–∏–æ ‚Äî –ø–æ –æ–¥–Ω–æ–º—É, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –æ–±—â–∏–π payload
        for f in files_to_send:
            try:
                await channel.send(file=f)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ: {e}")

        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç / –ê–Ω–∞–ª–∏–∑ ‚Äî —Ñ–∞–π–ª–∞–º–∏ –∏–∑ –ø–∞–º—è—Ç–∏
        transcript_file = discord.File(
            io.BytesIO(transcript_text.encode("utf-8")),
            filename="transcript.md"
        )
        await channel.send("üìù **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:**", file=transcript_file)

        summary_file = discord.File(
            io.BytesIO(summary.encode("utf-8")),
            filename="analysis.md"
        )
        await channel.send("üß† **–ê–Ω–∞–ª–∏–∑:**", file=summary_file)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        await channel.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
    finally:
        # 6) –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (Windows friendly)
        try:
            shutil.rmtree(tmp_dir, ignore_errors=True)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {tmp_dir}: {e}")


@bot.slash_command(name="listen", description="–ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –∞–Ω–∞–ª–∏–∑–æ–º")
async def listen(
    ctx: discord.ApplicationContext,
    duration: Option(int, "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö", required=False, default=300, min_value=10, max_value=3600)
):
    # –ü–æ–∏—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    voice_state = ctx.author.voice
    target_vc = voice_state.channel if voice_state else None

    if not target_vc and isinstance(ctx.channel, discord.TextChannel) and ctx.channel.category:
        for ch in ctx.channel.category.channels:
            if isinstance(ch, discord.VoiceChannel):
                target_vc = ch
                break

    if not target_vc:
        return await ctx.respond(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª. –í–æ–π–¥–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º.",
            ephemeral=True
        )

    if ctx.guild.id in sessions:
        return await ctx.respond(
            "‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥—ë—Ç –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π `/stop_listening`",
            ephemeral=True
        )

    try:
        await ctx.respond(f"üéôÔ∏è –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ **{target_vc.name}** –∏ –Ω–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å –Ω–∞ {duration} —Å–µ–∫.")

        vc = await target_vc.connect()
        timer_task = asyncio.create_task(_stop_after(ctx.guild.id, duration))
        sessions[ctx.guild.id] = {"vc": vc, "timer": timer_task}

        # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∞—É–¥–∏–æ sink (OGG/MP3), fallback –Ω–∞ WAV
        sink = make_sink()
        vc.start_recording(
            sink,
            _on_recording_finished,
            ctx.channel,  # –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤—Ç–æ—Ä—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –≤ callback
        )

        logger.info(f"–ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞ –≤ {target_vc.name}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏: {e}")
        await ctx.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}", ephemeral=True)
        sessions.pop(ctx.guild.id, None)


@bot.slash_command(name="stop_listening", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å")
async def stop_listening(ctx: discord.ApplicationContext):
    data = sessions.get(ctx.guild.id)
    if not data:
        return await ctx.respond("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç", ephemeral=True)

    try:
        data["vc"].stop_recording()
        await ctx.respond("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–ø–∏—Å—å.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        await ctx.respond(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")


@bot.slash_command(name="ping", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
async def ping(ctx: discord.ApplicationContext):
    whisper_status = "‚úÖ –ì–æ—Ç–æ–≤" if whisper_model else "‚ö†Ô∏è –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
    await ctx.respond(f"üèì –ü–æ–Ω–≥! Whisper: {whisper_status}")


@bot.event
async def on_ready():
    logger.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {bot.user} (ID: {bot.user.id})")
    logger.info(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {len(bot.guilds)} —Å–µ—Ä–≤–µ—Ä–∞–º")

    commands = [cmd.name for cmd in bot.pending_application_commands]
    logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {commands}")

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    try:
        await bot.sync_commands()
        logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        for guild in bot.guilds:
            logger.info(f"  ‚îî‚îÄ –°–µ—Ä–≤–µ—Ä: {guild.name} (ID: {guild.id})")
        logger.info("‚è≥ –ö–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ 1‚Äì2 –º–∏–Ω—É—Ç—ã")
        logger.info("üí° –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–±—Ä–∞—Ç—å '/' –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
        logger.info("üîÑ –ö–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")


@bot.event
async def on_application_command_error(ctx: discord.ApplicationContext, error):
    logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã {ctx.command}: {error}")
    if not ctx.response.is_done():
        await ctx.respond(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {error}", ephemeral=True)


if __name__ == "__main__":
    if not DISCORD_TOKEN:
        logger.error("‚ùå DISCORD_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        raise SystemExit(1)

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞...")
    try:
        bot.run(DISCORD_TOKEN)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
